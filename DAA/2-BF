#include <iostream>
#include <vector>
#include <limits.h>
using namespace std;

struct Edge {
    int u, v, weight;
};

bool Bellman_Ford(const vector<Edge>& edges, int V, int source) {
    vector<int> distance(V, INT_MAX);
    vector<int> parent(V, -1);
    distance[source] = 0;

    // Relax edges V-1 times
    for (int i = 0; i < V - 1; i++) {
        for (const auto& edge : edges) {
            int u = edge.u;
            int v = edge.v;
            int weight = edge.weight;
            if (distance[u] != INT_MAX && distance[u] + weight < distance[v]) {
                distance[v] = distance[u] + weight;
                parent[v] = u;
            }
        }
    }

    // Check for negative-weight cycles
    for (const auto& edge : edges) {
        int u = edge.u;
        int v = edge.v;
        int weight = edge.weight;
        if (distance[u] != INT_MAX && distance[u] + weight < distance[v]) {
            cout << "\nNegative weight cycle exists\n";
            return false;
        }
    }

    // Output results
    cout << "Vertex -> Cost, Parent\n";
    for (int i = 0; i < V; i++) {
        cout << "Vertex " << i + 1 << " -> Cost = " << distance[i] 
             << ", Parent = " << (parent[i] == -1 ? -1 : parent[i] + 1) << endl;
    }
    return true;
}

int main() {
    int V;
    cout << "BELLMAN FORD\n";
    cout << "Enter the number of vertices: ";
    cin >> V;

    vector<Edge> edges;
    cout << "Enter the graph as an adjacency matrix (0 for no edge):\n";
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            int weight;
            cin >> weight;
            if (weight != 0) {
                edges.push_back({i, j, weight});
            }
        }
    }

    int source;
    cout << "Enter source vertex: ";
    cin >> source;
    source -= 1;  // Convert to 0-based index

    if (Bellman_Ford(edges, V, source)) {
        cout << "\nNo negative weight cycle\n";
    }
    return 0;
}
