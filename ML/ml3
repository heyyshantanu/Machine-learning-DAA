import pandas as pd  # Import pandas library for data manipulation
import matplotlib.pyplot as plt  # Import matplotlib for plotting
import seaborn as sns  # Import seaborn for data visualization

# Load the dataset
df = pd.read_csv("CarPrice_Assignment.csv")

# Show the first 5 rows of the dataset
df.head(5)

# Display data types of each column to understand their format
df.dtypes

# Convert categorical 'fueltype' column into dummy/indicator variables
df = pd.get_dummies(df, columns=['fueltype'])

# Drop one of the dummy variables (fueltype_gas) to avoid redundancy
df.drop('fueltype_gas', axis=1)

from sklearn import preprocessing  # Import preprocessing for encoding categorical features
from sklearn.model_selection import train_test_split  # For splitting dataset into training and test sets
from sklearn.linear_model import LinearRegression  # Import Linear Regression model
from sklearn.metrics import mean_squared_error, mean_absolute_error  # For evaluating model performance

# Create label encoder instance to convert text labels into numbers
label_encoder = preprocessing.LabelEncoder()

# Display column names of the dataset to verify structure
df.columns

# Encode 'enginetype' with numbers (e.g., "ohc" -> 0, "ohcf" -> 1, etc.)
df['enginetype'] = label_encoder.fit_transform(df["enginetype"])

# Encode 'carbody' with numbers (e.g., "sedan" -> 0, "hatchback" -> 1, etc.)
df['carbody'] = label_encoder.fit_transform(df["carbody"])

# Define input features (X) and target variable (Y) for the model
X = df[['horsepower', 'fueltype_diesel', 'enginetype', 'enginesize', 'carbody']]
Y = df[['price']]

# Split data into training (70%) and testing (30%) sets
Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, Y, test_size=0.3)

# Initialize the Linear Regression model
model = LinearRegression()

# Train the model with training data
model.fit(Xtrain, Ytrain)

# Make predictions on the test data
ypred = model.predict(Xtest)

import math  # Import math library to calculate square root

# Calculate and print Mean Squared Error (MSE)
print("Mean squared error: ", mean_squared_error(Ytest, ypred))

# Calculate and print Mean Absolute Error (MAE)
print("Mean_absolute_error: ", mean_absolute_error(Ytest, ypred))

# Calculate and print Root Mean Squared Error (RMSE)
print("Root mean squared error: ", math.sqrt(mean_squared_error(Ytest, ypred)))

# Show unique values in 'enginetype' after encoding to verify categories
df['enginetype'].unique()
